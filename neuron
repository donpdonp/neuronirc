#!/usr/bin/env ruby
require 'bluepill'
require 'redis'
require 'json'

BASE_DIR = File.expand_path(File.dirname(__FILE__))
SETTINGS = JSON.load(File.open(File.join(BASE_DIR,"settings.json")))
redis = Redis.new

def help
  puts "#{File.basename(__FILE__)} usage: [command] [options...]"
  puts "--- Daemon commands ---"
  puts "'start [dentrites:<dendrite name>]'"
  puts "'restart '"
  puts "'stop [dentrites:<dendrite name>]'"
  puts "--- IRC commands ---"
  puts "'join #<channel>'"
  puts "'part #<channel>'"
  puts "'nick <nickname>'"
  puts "'say #<channel> <msg>'"
  exit
end

help if ['help','--help','-h','-?'].include?(ARGV[0])

log_dir = File.join(BASE_DIR, "log")
Dir.mkdir(log_dir) unless File.directory?(log_dir)
opts = {:base_dir => File.join(BASE_DIR,".bluepill"),
        :log_file => File.join(log_dir,"bluepill")}
controller = Bluepill::Controller.new(opts)
running = controller.running_applications.include?('neuron')

if ARGV.size == 0
  if running
    puts "neuron is running as nick: #{redis.get('nick')}"
  end
  controller.handle_command('neuron', 'status')
end

# Daemon management
if ARGV[0] == 'start'
  unless running
    cmd = "bundle exec bluepill load neuron.pill --no-privileged --base-dir #{opts[:base_dir]} --logfile #{opts[:log_file]}"
    $stderr.puts cmd
    system(cmd)
  end
  controller.handle_command('neuron', 'start', ARGV[1])
end

if ARGV[0] == 'stop'
  if running
    controller.handle_command('neuron', 'stop', ARGV[1] || "dendrites")
  else
    puts "Not running"
  end
end

if ARGV[0] == 'restart'
  if running
    controller.handle_command('neuron', 'restart', ARGV[1] ||'dendrites')
  end
end

if ARGV[0] == 'quit'
  if running
    controller.handle_command('neuron', 'stop')
    controller.handle_command('neuron', 'quit')
  else
    puts "Not running"
  end
end

# Send the command to the bot
if ARGV.size == 2
  msg = {"command" => ARGV[0], "message" => ARGV[1]}
end

if ARGV.size == 3
  msg = {"command" => ARGV[0], "target" => ARGV[1], "message" => ARGV[2]}
end

if msg
  puts msg.inspect
  redis.publish :say, msg.to_json
end